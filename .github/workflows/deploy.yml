name: Deploy to Rental Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if any)
      run: npm test --if-present
      
    - name: Deploy to rental server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # エラーハンドリングを有効化
          set -e
          
          # デバッグ情報を表示
          echo "=== Deployment Debug Info ==="
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "=========================="
          
          # プロジェクトディレクトリの確認
          echo "Checking PROJECT_PATH secret..."
          PROJECT_PATH="${{ secrets.PROJECT_PATH }}"
          echo "PROJECT_PATH value: '$PROJECT_PATH'"
          echo "PROJECT_PATH length: ${#PROJECT_PATH}"
          
          if [ -z "$PROJECT_PATH" ]; then
            echo "ERROR: PROJECT_PATH is not set or empty"
            echo "Please check GitHub Secrets settings"
            echo "Expected format: /home/xs115546/xs115546.xsrv.jp/public_html"
            exit 1
          fi
          
          echo "Moving to project directory: $PROJECT_PATH"
          
          # ディレクトリが存在しない場合は作成
          if [ ! -d "$PROJECT_PATH" ]; then
            echo "Creating project directory: $PROJECT_PATH"
            mkdir -p "$PROJECT_PATH"
          fi
          
          cd "$PROJECT_PATH" || {
            echo "ERROR: Cannot access project directory $PROJECT_PATH"
            exit 1
          }
          
          echo "Current directory after cd: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # 既存のファイルをバックアップ（初回でない場合）
          if [ -f "index.html" ]; then
            echo "Backing up existing files..."
            mkdir -p backup_$(date +%Y%m%d_%H%M%S)
            cp -r * backup_$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
          fi
          
          # 静的ファイルのみをコピー
          echo "Copying static files..."
          
          # HTMLファイル
          cp -r *.html . 2>/dev/null || echo "No HTML files to copy"
          
          # CSSファイル
          cp -r *.css . 2>/dev/null || echo "No CSS files to copy"
          
          # JavaScriptファイル（サーバーファイルを除く）
          cp script.js . 2>/dev/null || echo "No script.js to copy"
          cp navigation.js . 2>/dev/null || echo "No navigation.js to copy"
          cp static-data.js . 2>/dev/null || echo "No static-data.js to copy"
          
          # データファイル
          cp grammar.json . 2>/dev/null || echo "No grammar.json to copy"
          cp examples.js . 2>/dev/null || echo "No examples.js to copy"
          
          # ディレクトリ構造
          cp -r parts-of-speech . 2>/dev/null || echo "No parts-of-speech to copy"
          cp -r sentence-patterns . 2>/dev/null || echo "No sentence-patterns to copy"
          cp -r phrases . 2>/dev/null || echo "No phrases to copy"
          cp -r clauses . 2>/dev/null || echo "No clauses to copy"
          cp -r sentence-types . 2>/dev/null || echo "No sentence-types to copy"
          cp -r tenses . 2>/dev/null || echo "No tenses to copy"
          cp -r modals . 2>/dev/null || echo "No modals to copy"
          cp -r subjunctive . 2>/dev/null || echo "No subjunctive to copy"
          cp -r comparison . 2>/dev/null || echo "No comparison to copy"
          cp -r mood . 2>/dev/null || echo "No mood to copy"
          cp -r components . 2>/dev/null || echo "No components to copy"
          
          # サーバーファイルを除外
          rm -f server.js
          rm -f app.js
          rm -f package.json
          rm -f package-lock.json
          rm -rf node_modules
          rm -f ecosystem.config.js
          rm -f env.example
          rm -rf .github
          rm -rf .git
          rm -f .gitignore
          rm -f .gitattributes
          rm -f README.md
          rm -f *.ps1
          rm -rf scripts
          
          echo "Static files copied successfully"
          echo "Directory contents after copy:"
          ls -la
          
          echo "=== Deployment completed successfully ===" 