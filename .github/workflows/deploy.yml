name: Deploy to Rental Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (if any)
      run: npm test --if-present
      
    - name: Deploy to rental server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # エラーハンドリングを有効化
          set -e
          
          # デバッグ情報を表示
          echo "=== Deployment Debug Info ==="
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Node.js version: $(node --version 2>/dev/null || echo 'Node.js not installed')"
          echo "NPM version: $(npm --version 2>/dev/null || echo 'NPM not installed')"
          echo "PM2 version: $(pm2 --version 2>/dev/null || echo 'PM2 not installed')"
          echo "Git version: $(git --version 2>/dev/null || echo 'Git not installed')"
          echo "=========================="
          
          # プロジェクトディレクトリの確認
          PROJECT_PATH="${{ secrets.PROJECT_PATH }}"
          if [ -z "$PROJECT_PATH" ]; then
            echo "ERROR: PROJECT_PATH is not set"
            exit 1
          fi
          
          echo "Moving to project directory: $PROJECT_PATH"
          
          # ディレクトリが存在しない場合は作成
          if [ ! -d "$PROJECT_PATH" ]; then
            echo "Creating project directory: $PROJECT_PATH"
            mkdir -p "$PROJECT_PATH"
          fi
          
          cd "$PROJECT_PATH" || {
            echo "ERROR: Cannot access project directory $PROJECT_PATH"
            exit 1
          }
          
          echo "Current directory after cd: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # 必要なツールの確認とインストール
          echo "Checking required tools..."
          
          # Node.jsの確認
          if ! command -v node &> /dev/null; then
            echo "Node.js not found. Please install Node.js on the server first."
            echo "Run: curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && sudo apt-get install -y nodejs"
            exit 1
          fi
          
          # PM2の確認
          if ! command -v pm2 &> /dev/null; then
            echo "PM2 not found. Installing PM2..."
            npm install -g pm2
          fi
          
          # Gitの確認
          if ! command -v git &> /dev/null; then
            echo "Git not found. Please install Git on the server first."
            echo "Run: sudo apt-get install -y git"
            exit 1
          fi
          
          # 現在のプロセスを停止
          echo "Stopping existing process..."
          pm2 stop english-grammar-app 2>/dev/null || echo "No existing process to stop"
          
          # Gitリポジトリの初期化（初回の場合）
          if [ ! -d ".git" ]; then
            echo "Initializing Git repository..."
            git init
            git remote add origin https://github.com/shtomi-tech/English-grammer2.git
          fi
          
          # Gitから最新のコードを取得
          echo "Fetching latest code..."
          git fetch origin main || {
            echo "ERROR: Failed to fetch from Git"
            exit 1
          }
          git reset --hard origin/main || {
            echo "ERROR: Failed to reset to main branch"
            exit 1
          }
          
          # 依存関係をインストール
          echo "Installing dependencies..."
          npm ci --production || {
            echo "ERROR: Failed to install dependencies"
            exit 1
          }
          
          # 環境変数ファイルが存在しない場合は作成
          if [ ! -f .env ]; then
            echo "Creating .env file..."
            cp env.example .env 2>/dev/null || echo "No env.example found, creating empty .env"
            echo "# Environment variables" > .env
          fi
          
          # アプリケーションを起動
          echo "Starting application..."
          pm2 start server.js --name english-grammar-app --update-env || {
            echo "ERROR: Failed to start application with PM2"
            exit 1
          }
          
          # プロセスが正常に起動したか確認
          sleep 5
          echo "PM2 status:"
          pm2 status
          
          # ログを確認
          echo "Application logs:"
          pm2 logs english-grammar-app --lines 10
          
          echo "=== Deployment completed successfully ===" 