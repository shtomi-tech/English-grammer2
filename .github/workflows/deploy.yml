# GitHub Actionsのワークフロー名
name: Deploy to Rental Server

# ワークフローが実行されるトリガー
on:
  # mainまたはmasterブランチへのpush時
  push:
    branches: [ main, master ]
  # 手動での実行を許可
  workflow_dispatch:

jobs:
  deploy:
    # 実行環境として最新のUbuntuを使用
    runs-on: ubuntu-latest
    
    steps:
    # 1. リポジトリのコードをチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2. Node.js環境をセットアップ
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        # Node.jsのバージョンを指定
        node-version: '18'
        # npmのキャッシュを有効化
        cache: 'npm'
        
    # 3. 依存パッケージをインストール
    # package-lock.json に基づいてインストールするため `ci` を使用
    - name: Install dependencies
      run: npm ci
      
    # 4. テストを実行 (testスクリプトが存在する場合のみ)
    - name: Run tests
      run: npm test --if-present

    # 5. プロジェクトをビルド (buildスクリプトが存在する場合のみ)
    # このステップで、公開に必要なファイル（HTML, CSS, JSなど）を
    # 'dist' や 'build' といった特定のディレクトリにまとめるのが一般的です。
    # これにより、次のデプロイステップで転送するファイルを明確にできます。
    # もしビルドプロセスがない場合は、このステップはスキップされても問題ありませんが、
    # デプロイするファイルを一つのフォルダにまとめることを強く推奨します。
    - name: Build project
      run: npm run build --if-present

    # 6. rsyncを使用してサーバーにファイルをデプロイ
    # 以前のスクリプトではサーバー上でファイルのコピーや削除を行っていましたが、
    # この方法では、GitHub Actionsの実行環境（ランナー）から直接サーバーに必要なファイルのみを転送します。
    # こちらの方が、より高速で安全、かつ確実です。
    - name: Deploy to rental server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        
        # [重要] ランナーからサーバーへコピーするファイル/ディレクトリを指定します。
        # 'dist/' のように末尾にスラッシュを付けると、そのディレクトリの「中身」がコピーされます。
        # スラッシュを付けないと、'dist' ディレクトリ自体がコピー先のフォルダ内に作成されます。
        # プロジェクトのビルド成果物が格納されるディレクトリに合わせて変更してください。
        # ビルドステップがない場合は、'./' を指定することも可能ですが、その場合は不要なファイルが転送されないように注意が必要です。
        # source: "dist/" # <-- ★★★ プロジェクトに合わせてこの値を変更してください ('build/' や './' など)
        
        # サーバー上のデプロイ先ディレクトリ
        # target: ${{ secrets.PROJECT_PATH }}
        
        # デプロイ後にサーバー上で実行するコマンド。
        # ここではデプロイが成功したことの確認メッセージと、デプロイ先のファイル一覧を表示しています。
        # 必要に応じて、キャッシュのクリアやサーバープロセスの再起動などのコマンドを追加できます。
        script: |
          set -e
          echo "✅ Deployment successful!"
          echo "Deployed files to: ${{ secrets.PROJECT_PATH }}"
          echo "Current directory contents:"
          ls -la ${{ secrets.PROJECT_PATH }}